<p><strong>LECTURE FOUR</strong></p>
<p><strong>ARRAY</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>WHAT ARE ARRAYS?<br /> </strong><br /> &nbsp;&nbsp; Arrays are data structures consisting of related data items of the same type referred to by a common name.<br /> <br /> &nbsp;&nbsp; An array is a fixed-length data structure that is used to hold more than one value of the same data type<br /> <br /> &nbsp;&nbsp; Arrays make it convenient to process related groups of values<br /> <br /> &nbsp;&nbsp; Arrays remain the same length once they're created, although an array variable may be reassigned such that it refers to a new array of a different length<br /> <br /> &nbsp;&nbsp; For Instance, Suppose you have been asked to declare variables to hold employee ids of three employees. The employee ids will be integers. The variable declarations to hold three integer values is:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int empId1, empId2, empId3;<br /> <br /> &nbsp;&nbsp; What do you do if the number of employees increases to&nbsp; 5 ?&nbsp; 1000 ??&nbsp; 20000 ???.<br /> <br /> &nbsp;&nbsp; You definitely would not want to declare 1,000 int variables like empId1, empId2...empId1000. Even if you do that, the resulting code would be unmanageable and clumsy.<br /> <br /> &nbsp;&nbsp; Arrays come to your rescue in such situations.<br /> <br /> &nbsp;&nbsp; Using an array, you can declare a variable of a type, which can hold as many values of that type as you want<br /> <br /> <strong>ARRAY DECLARATION<br /> </strong><br /> &nbsp;&nbsp; You declare an array variable by placing [ ] (empty square brackets) after the data type or after the variable name. For example,<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a)&nbsp;&nbsp; int[] empId;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b)&nbsp;&nbsp; int empId[];<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c)&nbsp;&nbsp; float[] salary;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d)&nbsp;&nbsp; String[] name;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e)&nbsp;&nbsp; Employee emp [ ];<br /> <br /> <br /> <strong>ARRAY CREATION<br /> </strong><br /> &nbsp;&nbsp; All arrays in Java are objects. The array object creation expression starts with the new operator, followed by the data type of the values you want to store in the array, followed by an integer enclosed in [] (brackets), which is the number of values you want to store in the array.<br /> <br /> <u>The general syntax for array creation expression is as follows:<br /> </u><br /> &nbsp;&nbsp;&nbsp; // Creates an array object of type ArrayDataType and length ArrayLength<br /> <br /> <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ArrayDataType[ArrayLength];<br /> </strong><br /> &nbsp;&nbsp; For example, you create an array to store five int employee ids as follows:<br /> <br /> <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new int[5];<br /> </strong><br /> &nbsp;&nbsp; In this expression, 5 is the length of the array.<br /> <br /> <strong>Example 1.<br /> <br /> public class ArraysExample1<br /> { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //array declaration<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int empId[];&nbsp;&nbsp; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //array creation<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empId = new int[5]; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> } <br /> <br /> </strong><br /> The above code creates an integer array named empId and the array length / capacity is 5.<br /> <br /> <strong>ACCESSING ARRAY ELEMENTS<br /> </strong><br /> Once you create an array object using the new operator, you can refer to each individual element of the array using an element&rsquo;s index enclosed in brackets.<br /> <br /> The index for the first element is 0, the second element 1, the third element 2, and so on<br /> <br /> For example, If you have an array of length 5, the indexes of the array elements would be 0, 1, 2, 3, and 4 <br /> <br /> Example 2:<br /> <br /> <strong>public class ArraysExample2<br /> {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int empId[] = new int[5]; <br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a = empId[2];<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(empId[1]);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(a);<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> }<br /> <br /> </strong>The output of the above code is: 0<br /> <br /> <strong><u>Note:<br /> </u></strong><br /> &nbsp;&nbsp; When an array is created, each element of the array receives a default value<br /> &nbsp;&nbsp; zero (0) for the numeric primitive-type elements<br /> &nbsp; &nbsp;&nbsp;false for boolean elements<br /> &nbsp;&nbsp; null for references<br /> <br /> you can as well combine variable declaration with array declaration in as much they are of the same data type.<br /> <br /> <strong>&nbsp;For example :<br /> <br /> &nbsp;&nbsp; //this declares integer variable a and integer //array variable b<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a, b[];</strong><br /> <br /> But be careful and conscious of the position of the square bracket... Below declares both a and b as an integer array variable<br /> &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;int[] a, b;<br /> <br /> <strong>Example2:<br /> <br /> public class ArraysExample2<br /> {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int empId[] = new int[5]; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empId[0] = 20;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empId[1] = 60;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empId[2] = 85;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empId[3] = empId[1];<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; 5; i++)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(empId[i]);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> }<br /> </strong><br /> <br /> <strong>USING AN ARRAY INITIALIZER<br /> </strong><br /> &nbsp;&nbsp; You have seen how to create an array using the new operator and thereafter initialize it with its elements. There is another way of initializing an array variable with its elements...This new concept is referred to as &ldquo;using array initialize&rdquo;.<br /> <br /> &nbsp;&nbsp; An array initializer is a comma-separated list of expressions (called an initializer list) enclosed in braces<br /> <br /> &nbsp;&nbsp; In this case, the array length is determined by the number of elements in the initializer list.<br /> <br /> &nbsp;&nbsp; For example,<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] n = { 10, 20, 30, 40, 50 };<br /> <br /> &nbsp;&nbsp; creates a five-element array with index values 0-4. Element n[0] is initialized to 10, n[1] is initialized to 20, and so on<br /> <br /> When the compiler encounters an array declaration declared using array initializer, it counts the number of elements in the list to determine the size of the array, then sets up the appropriate new operation &ldquo;behind the scenes.&rdquo;<br /> <br /> <strong>For example,<br /> </strong><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a = {10,20,30,40,50} ;<br /> <br /> &nbsp;&nbsp; is analogous to :<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a = new int[5];<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[0] = 10; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[1] = 20;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[2] = 30;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[3] = 40;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[4] = 50;<br /> <br /> <br /> <strong>ENHANCED FOR STATEMENT<br /> </strong><br /> &nbsp;&nbsp; The enhanced for statement iterates through the elements of an array without using a counter, thus avoiding the possibility of &ldquo;stepping outside&rdquo; the array.<br /> <br /> &nbsp;&nbsp; The syntax of an enhanced for statement is:<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ( parameter : arrayName )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement<br /> <br /> &nbsp;where parameter has a type and an identifier (e.g., int number), and arrayName is the array through which to iterate <br /> <br /> <strong>public class ArraysExample4<br /> {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] array = { 20, 40, 60, 80, 100};<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int total = 0; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for ( int number : array )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total += number;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.printf( "Total of array elements: %d\n", total );&nbsp;&nbsp; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> } <br /> </strong><br /> <br /> <strong>MULTIDIMENSIONAL ARRAY<br /> </strong><br /> &nbsp;&nbsp; Multidimensional arrays with two dimensions are often used to represent tables of values consisting of information arranged in rows and columns<br /> <br /> &nbsp;&nbsp; To identify a particular table element, we must specify two indices<br /> <br /> &nbsp;&nbsp; By convention, the first identifies the element's row and the second its column<br /> <br /> &nbsp;&nbsp; Arrays that require two indices to identify a particular element are called two-dimensional arrays<br /> <br /> &nbsp;&nbsp; For example, you can declare a two dimensional array of int as shown:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[][] table;<br /> <br /> &nbsp;&nbsp; A two-dimensional array of int with three rows and two columns can be created as shown:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table = new int[3][2]; <br /> <br /> &nbsp;&nbsp; The row number and the column number always starts at zero. For example, you can assign a value to the first row and the second column in the table array as shown:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table[0][1] = 32;<br /> <br /> &nbsp;&nbsp; You can assign a value 71 to the third row and the first column like so:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table[2][0] = 71; <br /> <br /> <strong><u>Note:<br /> </u></strong><br /> &nbsp;&nbsp;&nbsp; You must specify the dimension of at least the first level array at the time you create a multi-dimensional array (i.e number of rows);<br /> <br /> &nbsp;&nbsp; <strong>For example,<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table = new int[3][];<br /> </strong><br /> &nbsp;&nbsp; This statement creates only first level of array. Only table[0], table[1] and table[2] exist at this time. They are referring to null<br /> <br /> &nbsp;&nbsp; You must specify the dimension of at least the first level array at the time you create a multi-dimensional array (i.e number of rows);<br /> <br /> &nbsp;&nbsp; <strong>For example,<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table = new int[3][];<br /> </strong><br /> &nbsp;&nbsp; This statement creates only first level of array. Only table[0], table[1] and table[2] exist at this time. They are referring to null</p>
<p><strong>&nbsp;</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>**************END OF LECTURE FOUR****************</strong></p>