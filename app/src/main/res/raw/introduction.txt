<p><strong>LECTURE ONE</strong></p>
<p>&nbsp;</p>
<p><strong>WHAT IS COMPUTER PROGRAMMING?</strong><br /> <br /> &nbsp;&nbsp;&nbsp; Computer programming is the way of writing a sequence/set of instructions to tell a computer to perform a specific task. This sequence of instructions written for a computer to execute is referred to as computer program. A programming language is the set of notations used to write a computer program. The person who writes a computer program is called a <strong>programmer</strong>.<br /> <br /> <strong>TYPES OF PROGRAMMING LANGUAGE</strong><br /> <br /> &nbsp;&nbsp; (1) Low Level Languages<br /> &nbsp;&nbsp; (2) High Level Languages<br /> <br /> <u>Low Level languages:</u> are languages written in a way similar to the way computer hardware manipulates symbols. A low level language provides little or no abstraction of programming concepts and it deals with computer hardware and constraints. It may also be referred to as computer's native language and it is designed to operate and handle the entire hardware and instruction sets architecture of a computer directly. Hence, it is considered to be closer to computers. There are two examples of Low Level Languages, namely :<br /> <br /> &nbsp;&nbsp; (A) Machine Language<br /> &nbsp;&nbsp; (B) Assembly Language<br /> <br /> <u>MACHINE LANGUAGE:</u> is the sequence of 0s (Zero's) and 1s (One's)&nbsp; used to write a sequence of instructions for the computer to execute. It is also referred to as instructions written in binary format.<br /> * ASSEMBLY LANGUAGE uses mnemonic or symbols to write instructions for the computer to execute.<br /> <br /> <strong>HIGH LEVEL LANGUAGES</strong><br /> <br /> &nbsp;&nbsp; HLL is a programming language that enables a programmer to write programs that are more or less independent of a particular type of computer. They are languages that shields programmers from the responsibility of having to manage explicitly all the computer features of data storage and operations. Management of these computer features is handled by the operating system.<br /> Examples of High Level Languages are PHP, C, C#, FORTRAN, JAVA, PYTHON e.t.c.<br /> <br /> <strong><u>There are many High Level Languages because :</u></strong><br /> <br /> (1) No single language can solve all various computer problems ( i.e. Different task require different tools).</p>
<p><br /> (2) Technology Development.<br /> <br /> <strong>CLASSES&nbsp; OF HIGH LEVEL LANGUAGES ACCORDING TO PROGRAMMING PARADIGMS ARE :<br /> </strong><br /> &nbsp;&nbsp; (1) Procedural Paradigm<br /> &nbsp;&nbsp; (2) Imperative Paradigm<br /> &nbsp;&nbsp; (3) Logic Paradigm<br /> &nbsp;&nbsp; (4) Object Oriented Paradigm<br /> &nbsp;&nbsp; (5) Functional Paradigm<br /> &nbsp;&nbsp; (6) Scripting Paradigm<br /> &nbsp;&nbsp; (7) Declarative Paradigm<br /> <br /> <strong>FEATURES OF PROGRAMMING LANGUAGES<br /> </strong><br /> &nbsp;&nbsp; (1) Instructions are specific leaving no room for alternative meaning<br /> <br /> &nbsp;&nbsp; (2) Instructions are detailed such that no gap is left to be filled by common sense<br /> <br /> &nbsp;&nbsp; (3) Instructions must be given within the limited vocabulary of the language since new words sense are not permitted<br /> <br /> &nbsp;&nbsp; (4) Instructions must be given following no grammatical constraints (i.e no specified syntax)<br /> <br /> &nbsp;&nbsp; (5) Programming consists of input, processing and output.<br /> <br /> &nbsp;&nbsp; (6) Programming in High Level Language requires a utility to convert the instructions to machine codes that the computer can actually operate on.<br /> <br /> &nbsp;&nbsp; Assembly Languages require an ASSEMBLER to convert its symbols to machine language while High Level Languages have 2 types of translators which are (1) COMPILER and (2) INTERPRETER.<br /> <br /> &nbsp;&nbsp; COMPILER is used for compiling instructions and it executes instructions together at a time while on the other hand, INTERPRETER is used to interpret instructions one at a time.<br /> <br /> <strong>WHAT IS JAVA?<br /> </strong><br /> &nbsp;&nbsp; Java is a general purpose programming language. It is an Object-Oriented Language initially referred to as OAK.Java is CASE-SENTITIVE (i.e SuperTech is not the same as supertech in java or superTech). One of the most important features of java is its capability to write a program once and run the same program on any platform (i.e on any device)<br /> <br /> <strong>WHY JAVA?<br /> </strong><br /> &nbsp;&nbsp; (1) PLATFORM INDEPENDENT<br /> &nbsp;&nbsp; (2) SIMPLICITY<br /> &nbsp;&nbsp; (3) ROBUSTNESS<br /> &nbsp;&nbsp; (4) MAINTAINABILITY<br /> <br /> <strong>WHAT IS A JAVA PROGRAM?<br /> </strong><br /> &nbsp;&nbsp; A java program is a set of instructions written using java programming language for a computer to perform a specific task. Writing a Java Program involves three steps:<br /> <br /> writing the source code<br /> compiling the source code<br /> running the compiled code<br /> <br /> &nbsp;&nbsp; You can write Java programs using a text editor of your choice, such as Notepad on Windows, vi editor on UNIX, etc. The source code is compiled into object code, also known as BYTECODE, using a Java compiler. The compiled code object code or bytecode is run by a JVM (JAVA VIRTUAL MACHINE). You can also use an IDE (INTEGRATED DEVELOPMENT ENVIRONMENT) such as NetBeans or Eclipse to write Java programs.<br /> <br /> <strong>WRITING THE SOURCE CODE:<br /> </strong><br /> &nbsp;&nbsp; You can use any editor of your choice to write a source code. When you are done writing the source code, you must save the file with the extension .java (e.g Welcome.java). Note: Any extension other than .java is not acceptable.<br /> <br /> We will start by writing a java program that welcomes you to CSC201.<br /> <br /> -Open your text editor and type the following :<br /> <br /> public class Welcome<br /> {<br /> &nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Welcome to CSC201");<br /> &nbsp;&nbsp; }<br /> }<br /> <br /> Now save your file as Welcome.java<br /> <br /> <strong>COMPILING THE SOURCE CODE :<br /> </strong><br /> &nbsp;&nbsp; To compile your java source code, you use the command javac (Java Compiler) on the command prompt. For example, to compile the above program, follow theis simple steps:<br /> <br /> &nbsp;&nbsp; Open your command prompt(CMD)<br /> Change directory to the path where you saved the above program (Hint: By using the cd and the dir command).<br /> &nbsp;Now type: javac Welcome.java<br /> <br /> &nbsp;&nbsp; If the program compiles, the compiler produces a file called <u>Welcome.class</u> that contains&nbsp;&nbsp;&nbsp; the compiled version of the program.<br /> <br /> <strong>RUNNING THE COMPILED CODE :</strong></p>
<p><br /> &nbsp;&nbsp; The Java compiler translates Java source code into bytecode. Bytecodes are executed by the JVM(Java Virtual Machine). You invoke the JVM by using the command &ldquo;java&rdquo;. For Example, to run the above program, simply type :&nbsp;&nbsp;&nbsp;&nbsp; java Welcome<br /> <br /> If you get everything right, You should see 'Welcome to CSC201' as your output.<br /> <br /> System.out.println() is a method call to display message(known as output) on the command prompt.<br /> <br /> method &lsquo;main&rsquo; is where the execution of the code begins. main is always written with the public, static and void qualifiers<br /> <br /> 1) void: The function it qualifies does not return any value<br /> 2) static: The function it qualifies remains unchanged... not subject to modification<br /> 3) public: The function it qualifies is made available to any other function for access.<br /> 4) String[] args: args is a parameter. args(short for arguments) because of []&nbsp; which indicates [ ] args is an array (i.e can contain many variables)<br /> 5) String: describes args variable types<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *****END OF LECTURE 1 *****</p>