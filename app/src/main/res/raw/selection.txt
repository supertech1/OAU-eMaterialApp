<p><strong>LECTURE THREE</strong></p>
<p><strong>SELECTION STATEMENTS</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>WHAT IS SELECTION STATEMENT?<br /> </strong><br /> &nbsp;&nbsp;&nbsp;&nbsp; Selection statement is a statement used to choose among alternative courses of actions. Java supports three selection statements: if, if...else and switch statement. These statements allow you to control the flow of your program's execution based upon conditions known only during run time.<br /> <br /> <strong>If statement<br /> </strong><br /> &nbsp;&nbsp; The &lsquo;if statement&rsquo; either performs (selects) an action, if a condition is true, or skips it, if the condition is false.<br /> <br /> &nbsp;&nbsp; The &lsquo;if statement&rsquo; is a single-selection statement because it selects or ignores a single action (or, as we'll soon see, a single group of actions).<br /> <br /> <u>The format of an if statement is:<br /> </u><br /> <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(condition)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement(s)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> </strong><br /> &nbsp;&nbsp; E.g :<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(5 &gt; 2)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Five is greater than 2");<br /> <br /> &nbsp;&nbsp; The condition must be a Boolean expression. That is, it must evaluate to true or false. If the condition evaluates to true, statement(s)&nbsp; is/are executed. For example, in the example given above, since 5 is greater than 2(i.e the expression is true), java will execute the statement attached with the &lsquo;if statement&rsquo;. Therefore, the output of the code is : Five is greater than 2<br /> <br /> <strong>If...Else statement<br /> </strong><br /> &nbsp;&nbsp; The &lsquo;if...else statement&rsquo; performs an action if a condition is true and performs a different action if the condition is false.<br /> <br /> &nbsp;&nbsp; The &lsquo;if...else statement&rsquo; is called a double-selection statement because it selects between two different actions (or groups of actions)<br /> <br /> <u>The format of an if-else statement is<br /> </u><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (condition)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement1<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement2<br /> </strong><br /> <br /> &nbsp;&nbsp; The condition must be a Boolean expression. That is, it must evaluate to true or false. If the condition evaluates to true, statement1 is executed. Otherwise, statement2 is executed. The else part is optional.<br /> <br /> <strong>&nbsp;&nbsp; For Example,<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(2 &gt; 3)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("2 &gt; 3")<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("2 not greater than 3");<br /> </strong><br /> The output of the above example is: 2 not grater than 3 since the condition evaluate to false.<br /> <br /> A program can test multiple cases by placing if...else statements inside other if...else statements to create nested if...else statements.<br /> &nbsp;&nbsp; <strong>For example,<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( studentGrade &gt;= 90 )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( "A" );<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( studentGrade &gt;= 80 )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( "B" );<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( studentGrade &gt;= 70 )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( "C" );<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( studentGrade &gt;= 60 )<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( "D" );<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( "F" );</strong><strong><br /> <br /> </strong><strong>SWITCH Statement<br /> </strong><br /> &nbsp;&nbsp; The switch statement performs one of many different actions, depending on the value of an expression.<br /> <br /> &nbsp;&nbsp; The switch statement is called a multiple-selection statement because it selects among many different actions (or groups of actions).<br /> <br /> &nbsp;&nbsp; The switch-expression must evaluate to a type: byte, short, char, int, enum, or String.<br /> <br /> <strong><u>The general form of a switch statement is:</u></strong><strong><u><br /> </u></strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>switch (switch-expression) {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case label1:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statements<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case label2:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statements<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case label3:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statements<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statements<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> </strong><br /> A switch statement is evaluated as follows:<br /> <br /> The first thing it does is to evaluate the switch expression.<br /> <br /> If the value of the switch-expression matches a case label, the execution starts from the matched case label and executes all statements until the end of the switch statement.<br /> <br /> If the value of the switch-expression does not match a case label, execution starts at the statement following the optional default label and continues until the end of the switch statement. <br /> <br /> <strong>For example,<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 10;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (i) {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 10: <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Ten"); <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 20:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Twenty");<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println ("No-match");<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br /> </strong><br /> The output of the above example is :<br /> &nbsp;&nbsp; Ten<br /> &nbsp;&nbsp; Twenty<br /> &nbsp;&nbsp; No-match<br /> <br /> To terminate a sequence of statements in switch statement, you make use of the break statement.<br /> <br /> <strong>For Example:<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 10;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (i) {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 10: <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Ten"); <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 20:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Twenty");<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println ("No-match");<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br /> <br /> </strong>&nbsp;&nbsp; The output of the above example is now : Ten&nbsp;&nbsp; (Due to the usage of break).<br /> <br /> &nbsp;&nbsp; Also, take note the following:<br /> <br /> &nbsp;&nbsp; continue : This is used to skip the remainder of a loop's body so as to retest the condition<br /> &nbsp;&nbsp; return : This is used mainly to return a value from a method back to the caller.<br /> <br /> <br /> <strong>&nbsp;&nbsp; **********LECTURE THREE**********</strong></p>