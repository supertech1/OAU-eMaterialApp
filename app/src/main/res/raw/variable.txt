<p><strong>LECTURE TWO</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>VARIABLES, DATA TYPES, /EXPRESSIONS</strong>&nbsp;<strong>WHAT IS A DATA TYPE?</strong><br /> <br /> &nbsp;&nbsp; Data type can be referred to as the type of values that can be stored, manipulated and used to execute programs.<br /> &nbsp;&nbsp; A programming language provides some predefined data types, which are known as built-in data types.<br /> <br /> &nbsp;&nbsp; A programming language may also let programmers define their own data types, which are known as user-defined data types.<br /> <br /> <strong><u>In Java, Data Type can be classified into two :<br /> </u></strong><br /> &nbsp;&nbsp; (1) Primitive Data-Type<br /> &nbsp;&nbsp; (2) Reference Data-Type<br /> <br /> <strong>PRIMITIVE DATA-TYPE<br /> </strong><br /> &nbsp;&nbsp;&nbsp; Primitive Data types are built-in data types defined without the help of any other data types.<br /> <br /> <strong><u>Java Defines Eight (8) Primitive Data types :<br /> </u></strong><br /> &nbsp;&nbsp; 1)&nbsp; byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (8-BIT)<br /> &nbsp;&nbsp; 2)&nbsp; short&nbsp;&nbsp;&nbsp;&nbsp; (16-BIT)<br /> &nbsp;&nbsp; 3)&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (32-BIT)<br /> &nbsp;&nbsp; 4)&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (64-BIT)<br /> &nbsp;&nbsp; 5)&nbsp; char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (32-BIT)<br /> &nbsp;&nbsp; 6)&nbsp; float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (32-BIT)<br /> &nbsp;&nbsp; 7)&nbsp; double&nbsp;&nbsp;&nbsp;&nbsp; (64-BIT)<br /> &nbsp;&nbsp; 8)&nbsp; boolean&nbsp;&nbsp;&nbsp; (true or false)<br /> <br /> byte, short, int, char and long are classified as Integral Types, double and float are classified as Floating-Point numbers.<br /> <br /> <strong>VARIABLES<br /> </strong><br /> &nbsp;&nbsp; A Variable is a named&nbsp; memory location that can be assigned a value. It can as well be referred to as a location in the computer's memory where a value can be stored for use later in a program.&nbsp; All Java variables must be declared with a name&nbsp; and a type&nbsp; before they can be used. A variable's name enables the program to access the value of the variable in memory.<br /> <br /> &nbsp;&nbsp; A variable's name can be any valid identifier. A variable's type specifies what kind of information is stored at that location in memory. Like other statements, declaration statements end with a semicolon (;).<br /> <br /> <strong><u>Examples :<br /> </u></strong><br /> &nbsp; String name;<br /> &nbsp; int age;<br /> <br /> * Variable Declaration and Initialization<br /> <br /> Declaration :<br /> <br /> &nbsp;&nbsp; String name;<br /> &nbsp;&nbsp; int age;<br /> <br /> Initialization :<br /> <br /> &nbsp;&nbsp; name = "segun";<br /> &nbsp;&nbsp; age = 20;<br /> <br /> You can also declare and initialize a variable with a single statement.<br /> <br /> e.g&nbsp;&nbsp;&nbsp;&nbsp; String name = "tola";<br /> <br /> <strong>&nbsp;WHAT IS AN IDENTIFIER?<br /> </strong><br /> &nbsp;&nbsp; An identifier in Java is a sequence of characters of unlimited length. The sequence of characters includes all Java letters and Java digits, the first of which must be a Java letter. Java uses the Unicode character set. A Java letter is a letter from any language that is represented by Unicode character set. For example, A-Z, a-z, _ (underscore), and $ are considered Java letters from the ASCII character set range of Unicode. Java digits include 0-9 ASCII digits and any Unicode character that denotes a digit in a language. Spaces are not allowed in an identifier.<br /> <br /> <strong><u>&nbsp;Rules guiding Identifiers :<br /> </u></strong><br /> &nbsp;&nbsp; 1)&nbsp; Identifier cannot start with a number<br /> &nbsp;&nbsp; 2)&nbsp; Identifier cannot contain a space<br /> &nbsp;&nbsp; 3)&nbsp; Identifier cannot contain operator<br /> <br /> <strong>Examples of valid identifier</strong> : name, age2d, add_sum, $sum, e.t.c.<br /> <strong>Examples of Invalid Identifiers:</strong>&nbsp; my name, 4dog , ade+id e.t.c<br /> <br /> <strong>WHAT ARE KEYWORDS?<br /> </strong><br /> &nbsp;&nbsp; Keywords are reserved words in java. Keywords are words that have predefined meanings in Java and they can only be used in the contexts defined by the Java language. Keywords in Java cannot be used as identifiers. Examples of Keywords are : do, for, if, byte, case, public e.t.c.<br /> <br /> <strong>COMMENTS<br /> </strong><br /> &nbsp;&nbsp; Comments are used to document program so that the program can be readable and understandable.&nbsp; There are three types of comments in java namely:<br /> <br /> &nbsp;&nbsp; 1)&nbsp; Single-line comment&nbsp;&nbsp; //<br /> &nbsp;&nbsp; 2)&nbsp; Multi-line comment&nbsp; /*&nbsp;&nbsp;&nbsp;&nbsp; */<br /> &nbsp;&nbsp; 3)&nbsp; Javadoc comment&nbsp;&nbsp; /**&nbsp;&nbsp;&nbsp; */<br /> <br /> <strong><u>Single-line comment<br /> </u></strong><br /> &nbsp;&nbsp; Single-line comment begins with // and terminate at the end of the line on which the // appears<br /> &nbsp;&nbsp; e.g //This is a comment<br /> <br /> <strong><u>Multi-line comment<br /> </u></strong><br /> &nbsp;&nbsp; These begin and end with delimiters, /*&nbsp;&nbsp;&nbsp;&nbsp; and&nbsp;&nbsp; */. The compiler ignores all text between the Delimiters.<br /> &nbsp;&nbsp; e.g&nbsp;&nbsp;&nbsp; /*This is another comment that is<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; called multi-line comment */<br /> <br /> <strong><u>Javadoc comment<br /> </u></strong><br /> These are delimited by /** and */. The compiler ignores all text between the delimiters. Javadoc comments enable you to embed program documentation directly in your programs. Such comments are the preferred Java documenting format in industry<br /> <br /> <strong>SEPARATORS<br /> </strong><br /> &nbsp; Separators help define the structure of a program, below are the separators in java with there purpose:<br /> <br /> <u>&nbsp;&nbsp; ( ) is called parenthesis</u>, it contains list of parameter/argument&nbsp; a method definition/invocation. Also, it surrounds cast types and delimits test expressions in flow control statements<br /> <br /> &nbsp; <u>&nbsp;{ } is called curly braces(or simply braces</u>), it defines blocks of code and automatically initializes arrays<br /> <br /> <u>&nbsp;&nbsp; [ ] is called square brackets(or simply brackets),</u> it declares array types and dereferences array values<br /> <br /> <u>&nbsp;&nbsp; ; is called terminator,</u> it terminates a statement<br /> <br /> <u>&nbsp;&nbsp; . is called DOT,</u> it selects a field or method from an object; separates package names from sub-package and class names<br /> <br /> <u>&nbsp;&nbsp; , is called comma</u>, it separates successive identifiers in variable declarations; chains statements in the test, expression of a for loop<br /> <br /> <strong>OPERATORS<br /> </strong><br /> &nbsp;&nbsp; An operator is a symbol that performs a specific kind of operation on one, two, or three operands, and produces a result. The type of the operator and its operands determines the kind of operation performed on the operands and the type of the result produced.<br /> <br /> <strong><u>Arithmetic Operators :</u></strong><br /> &nbsp;&nbsp; Arithmetic operators can only be used with numeric type operands. That is, both operands to arithmetic operators must be one of types byte, short, char, int, long, float, and double. These operators cannot have operands of boolean primitive type and reference type.<br /> <br /> <strong><u>&nbsp;Below are some of the&nbsp; Arithtmetic operators in java :</u></strong><br /> &nbsp;&nbsp; + (Addition) ,&nbsp; - (subtraction) , * (multiplication) , / (division) , % (modulus), ++ (Increment) ,&nbsp; -- (decrement) , e.t.c.<br /> <br /> <strong><u>Arithmetic Operations in Java<br /> </u></strong><br /> The program below sum 2 numbers and display the result<br /> <br /> import java.util.Scanner;<br /> <br /> <strong>public class Addition<br /> {<br /> &nbsp;&nbsp; //main method<br /> &nbsp;&nbsp; public static void main(String args[])<br /> &nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create Scanner to obtain input from the command prompt<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scanner input = new Scanner(System.in);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int number1;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int number2; //declarations<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sum;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("Enter first integer: ""); //prompt user<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number1 = input.nextInt(); //Read first number from user<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("Enter second integer");<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number2 = input.nextInt();<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum = number1 + number2;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.printf("sum is %d\n", sum);<br /> &nbsp;&nbsp; }<br /> }<br /> </strong><br /> <strong>Save the above program as Addition.java<br /> Compile by typing javac Addition.java on your command prompt<br /> Execute by typing java Addition</strong><br /> <br /> Note: import declaration helps the compiler to locate the class being used in a program.<br /> <br /> Assignment : Write a program to compute the average score in csc201 test comprising of 1500 students.<br /> <br /> <strong>CONTROL FLOW<br /> </strong><br /> &nbsp;&nbsp;&nbsp; Normally, statements in a program are executed one after the other in the order in which they&rsquo;re written. This process is called sequential execution. Various Java statements, which we&rsquo;ll soon discuss, enable you to specify that the next statement to execute is not necessarily the next one in sequence. This is called transfer of control.<br /> <br /> Java has only three kinds of control structures, which can as well be referred to as control statements:<br /> <br /> &nbsp;&nbsp; <strong>The sequence statement(Declarative/Expression statements)<br /> &nbsp;&nbsp; Selection statements<br /> &nbsp;&nbsp; and Repetition Statements</strong><br /> <br /> <strong>DECLARATIVE STATEMENT<br /> </strong><br /> &nbsp;&nbsp; A declaration statement is used to declare a variable. You have already been using this type of statement. For example,<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int num;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int num2 = 100;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String str;<br /> <br /> <strong>EXPRESSION STATEMENT<br /> </strong><br /> &nbsp;&nbsp; An expression with a semicolon at the end is called an expression statement. For example,<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num++;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++num;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num = 100;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num *= 10;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new String("This is a text");<br /> <br /> <br /> <br /> <br /> <strong>&nbsp;&nbsp; *******End of Lecture Two********</strong></p>